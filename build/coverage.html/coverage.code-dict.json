{"/home/travis/build/npmtest/node-npmtest-gsm-modem/test.js":"/* istanbul instrument in package npmtest_gsm_modem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gsm-modem/lib.npmtest_gsm_modem.js":"/* istanbul instrument in package npmtest_gsm_modem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gsm_modem = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gsm_modem = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gsm-modem/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gsm-modem && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gsm_modem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gsm_modem\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gsm_modem.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gsm_modem.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gsm_modem.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gsm_modem.__dirname + '/lib.npmtest_gsm_modem.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gsm-modem/node_modules/gsm-modem/index.js":"var SerialPort = require('serialport').SerialPort;\nvar Parsers = require('serialport').parsers;\nvar Pdu = require('./pdu');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar intel = require('intel');\n\n\n\n/**\n * Hayes command structure\n */\nfunction HayesCommand(hayesCommand, callback) {\n  \"use strict\";\n  this.cmd = hayesCommand;\n  this.response = null;\n  this.sent = false;\n  this.callback = callback;\n  this.waitCommand = null; //Specifies a string to wait for. Waits for standart responses\n\n  this.timeout = null;\n\n  this.toString = function () {\n    return this.cmd + '\\r';\n  };\n  this.doCallback = function (response) {\n    clearTimeout(this.timeout);\n    if (this.response === null) {\n      this.response = response;\n      if (typeof this.callback === 'function') {\n        this.callback(response);\n      }\n    }\n  };\n\n  this.startTimer = function (time, cb) {\n    this.timeout = setTimeout(function () {\n      this.doCallback('ERROR: TIMEOUT');\n      cb();\n    }.bind(this), time);\n  };\n}\n/**\n * Returns true if the string is in GSM 7-bit alphabet\n * @param text string to check\n * @return boolean\n */\nfunction isGSMAlphabet(text) {\n  \"use strict\";\n  var regexp = new RegExp(\"^[A-Za-z0-9 \\\\r\\\\n@£$¥èéùìòÇØøÅåΔ_ΦΓΛΩΠΨΣΘΞÆæßÉ!\\\"#$%&'()*+,\\\\-./:;<=>?¡ÄÖÑÜ§¿äöñüà^{}\\\\\\\\\\\\[~\\\\]|€]*$\");\n  return regexp.test(text);\n}\n/**\n * Constructor for the modem\n * Possible options:\n *  ports\n *  forever (if set to true, will keep trying to connect to modem even after it is disconnected. This can facilitate running this module as a daemon)\n *  debug\n *  auto_hangup\n *  ussdTimeout\n *  commandsTimeout\n *\n * Extends EventEmitter. Events:\n *  message - new SMS has arrived\n *  report - SMS status report has arrived\n *  USSD - USSD has arrived\n *  disconnect - modem is disconnected\n */\nfunction Modem(opts) {\n  \"use strict\";\n  // Call the super constructor.\n  EventEmitter.call(this);\n\n  this.ports = [];\n  if (undefined !== opts.port) {\n    this.ports.push(opts.port);\n  }\n  if (undefined !== opts.notify_port) {\n    this.ports.push(opts.notify_port);\n  }\n  if (undefined !== opts.ports) {\n    var i;\n    for (i = 0; i < opts.ports.length; ++i) {\n      this.ports.push(opts.ports[i]);\n    }\n  }\n\n  if (0 === this.ports.length) {\n    console.error('ports are undefined');\n    return null;\n  }\n\n  // Auto hang up calls\n  this.autoHangup = opts.auto_hangup || false;\n\n  this.ussdTimeout = opts.ussdTimeout || 15000;\n  this.commandsTimeout = opts.commandsTimeout || 15000;\n\n  this.forever = opts.forever;\n\n  this.connectingHandle;\n\n  this.logger = intel.getLogger();\n  if (opts.debug) {\n      this.logger.setLevel(intel.DEBUG);\n  }\n\n  this.logger.basicConfig({\n    format: '[%(date)s] %(levelname)s modem: %(message)s',\n    level: opts.debug ? intel.DEBUG : intel.ERROR\n  });\n  this.resetVars();\n}\nutil.inherits(Modem, EventEmitter);\nModem.prototype.isGSMAlphabet = isGSMAlphabet;\n\n/**\n *\n */\nModem.prototype.resetVars = function () {\n  this.portErrors = 0;\n  this.portConnected = 0;\n  this.portCloses = 0;\n  this.connected = false;\n\n  this.serialPorts = [];\n  this.buffers = [];\n  this.bufferCursors = [];\n  this.dataPort = null;\n\n  this.textMode = false;\n  this.echoMode = false;\n  this.commandsStack = [];\n  this.storages = {};\n  this.manufacturer = 'UNKNOWN';\n};\n/**\n * Connects to modem's serial port\n */\nModem.prototype.connect = function (cb) {\n  \"use strict\";\n  var i = 0;\n  for (i; i < this.ports.length; ++i) {\n    this.connectPort(this.ports[i], cb);\n  }\n};\n/**\n * Connect to the port\n */\nModem.prototype.connectPort = function (port, cb) {\n  var serialPort = new SerialPort(port, {\n    baudrate: 115200\n  });\n\n  var commandTimeout = null;\n  serialPort.on('open', function () {\n    serialPort.write('AT\\r', function (err) {\n      if (err) {\n        clearTimeout(commandTimeout);\n        this.onPortConnected(serialPort, -1, cb);\n      }\n    });\n    commandTimeout = setTimeout(function () {\n      this.onPortConnected(serialPort, 0, cb);\n    }.bind(this), 5000);\n  }.bind(this));\n\n  var buf = new Buffer(256*1024), bufCursor = 0;\n  var onData = function (data) {\n    if (buf.length < data.length + bufCursor){ bufCursor = 0; return; }\n    data.copy(buf, bufCursor);\n    bufCursor += data.length;\n    if (buf[bufCursor - 1] === 13 || buf[bufCursor - 1] === 10) {\n      var str = buf.slice(0,bufCursor).toString();\n      this.logger.debug('AT response: %s', str.trim());\n       serialPort.removeListener('data', onData);\n      if (str.indexOf('OK') !== -1 || str.indexOf('AT') !== -1) {\n        clearTimeout(commandTimeout);\n        this.onPortConnected(serialPort, 1, cb);\n      }\n    }\n  };\n\n  serialPort.on('data', onData.bind(this));\n\n  serialPort.on('error', function (err) {\n    if(!this.forever) {\n      this.logger.error('Port connect error: %s', err.message);\n    }\n\n    if (null !== commandTimeout) {\n      clearTimeout(commandTimeout);\n    }\n    this.onPortConnected(serialPort, -1, cb);\n  }.bind(this));\n};\n/**\n * Callback for port connect or error. Data modes:\n *   0 - notification\n *   1 - data\n *  -1 - error\n */\nModem.prototype.onPortConnected = function (port, dataMode, cb) {\n  this.logger.debug('port %s datamode: %d', port.path, dataMode);\n  if (dataMode === -1) {\n    ++this.portErrors;\n  } else {\n    ++this.portConnected;\n    this.serialPorts.push(port);\n\n    port.removeAllListeners('error');\n    port.removeAllListeners('data');\n    port.on('error', this.serialPortError.bind(this));\n    port.on('close', this.serialPortClosed.bind(this));\n\n    var buf = new Buffer(256*1024);\n    var cursor = 0;\n    this.buffers.push(buf);\n    this.bufferCursors.push(cursor);\n\n    //port.flush(function () {\n      port.on('data', this.onData.bind(this, port, this.buffers.length - 1));\n      if (1 === dataMode) {\n        this.dataPort = port;\n      }\n    //}.bind(this));\n  }\n\n  if (this.portErrors + this.portConnected === this.ports.length) {\n    if (null === this.dataPort) {\n      if(!this.forever) {\n        this.logger.error('No data port found');\n      }\n\n      this.close();\n      if (typeof cb === 'function') {\n        cb(new Error('NOT CONNECTED'));\n      }\n      if(this.forever) {\n        //Retry connecting in 1 sec\n        this.connectingHandle = setTimeout(function() {\n          this.logger.debug(\"Retrying to connect...\");\n          this.resetVars();\n          this.connect(cb);\n        }.bind(this, cb), 1000);\n      }\n    } else {\n      this.logger.debug('Connected, start configuring. Ports: ', this.serialPorts.length);\n      this.connected = true;\n      this.configureModem(cb);\n    }\n  }\n};\n\nModem.prototype.serialPortError = function (err) {\n  this.logger.error('Serial port error: %s (%d)', err.message, err.code);\n  this.emit('error', err);\n};\n\nModem.prototype.serialPortClosed = function () {\n  if (this.connected) {\n    ++this.portCloses;\n    this.logger.debug('Serial port closed. Emit disconnect');\n    this.emit('disconnect');\n  }\n  if(this.forever) {\n    this.resetVars();\n    this.connect();\n  }\n};\n/**\n * Closes connection to ports\n */\nModem.prototype.close = function (cb) {\n  var i = 0;\n  this.logger.debug('Modem disconnect called');\n  this.connected = false;\n\n  try {\n    for (i; i < this.serialPorts.length; ++i) {\n      this.serialPorts[i].close(this.onClose.bind(this, cb));\n    }\n  } catch (err) {\n    this.logger.error('Error closing modem: %s', err.message);\n  }\n};\n/**\n * Stops the reconnection loop and disconnects the modem if it is connected\n */\nModem.prototype.stopForever = function() {\n  this.forever = false;\n  if(this.connectingHandle) {\n    clearTimeout(this.connectingHandle);\n  }\n  this.close();\n}\n/**\n * Is called when the port is closed\n */\nModem.prototype.onClose = function (cb) {\n  ++this.portCloses;\n  this.logger.debug('Port was closed (%d / %d)', this.portCloses, this.serialPorts.length);\n  if (this.portCloses === this.serialPorts.length) {\n    this.logger.debug('All ports were closed');\n    this.resetVars();\n    this.logger.debug('... and variables cleared');\n    if (typeof cb === 'function') {\n      cb();\n    }\n  }\n};\n\n/**\n * Pushes command to commands stack\n */\nModem.prototype.sendCommand = function (cmd, cb, waitFor) {\n  \"use strict\";\n  this.logger.debug('Send command: %s', cmd);\n  if (!this.connected) {\n    this.logger.debug('Not connected!', cmd);\n    if (typeof cb === 'function') {\n      process.nextTick(function () {\n        cb('ERROR: NOT CONNECTED');\n      });\n    }\n    return;\n  }\n  var scmd = new HayesCommand(cmd, cb);\n  if (waitFor !== undefined) {\n    scmd.waitCommand = waitFor;\n  }\n  this.commandsStack.push(scmd);\n  if (this.commandsStack.length === 1) { //no previous commands are waiting in the stack, go ahead!\n    this.sendNext();\n  }\n};\n/**\n * Sends next command from stack\n */\nModem.prototype.sendNext = function () {\n  \"use strict\";\n  if (this.commandsStack.length === 0 || this.connected === false) {\n    return;\n  }\n  var cmd = this.commandsStack[0];\n  if (cmd && !cmd.sent) {\n    cmd.startTimer(this.commandsTimeout, function () {\n      this.logger.debug('command %s timedout', cmd.cmd);\n      this.emit('error', new Error('TIMEOUT'));\n      this.commandsStack.splice(0, 1);\n      this.sendNext();\n    }.bind(this));\n    this.__writeToSerial(cmd);\n  }\n};\n/**\n * Writes command to serial port\n */\nModem.prototype.__writeToSerial = function (cmd) {\n  \"use strict\";\n  cmd.sent = true;\n  this.willReceiveEcho = true;\n  this.logger.debug(' ----->', cmd.toString());\n  this.dataPort.write(cmd.toString(), function (err) {\n    if (err) {\n      this.logger.error('Error sending command:', cmd.toString(), 'error:', err);\n      this.sendNext();\n    }\n  }.bind(this));\n};\n/**\n *\n */\nModem.prototype.onData = function (port, bufInd, data) {\n  \"use strict\";\n  var buffer = this.buffers[bufInd];\n  this.logger.debug('%s <----', port.path, data.toString());\n  if (this.bufferCursors[bufInd] + data.length > buffer.length) { //Buffer overflow\n    this.logger.error('Data buffer overflow');\n    this.bufferCursors[bufInd] = 0;\n  }\n  data.copy(buffer, this.bufferCursors[bufInd]);\n  this.bufferCursors[bufInd] += data.length;\n  if (buffer[this.bufferCursors[bufInd] - 1] !== 10 && data.toString().indexOf('>') === -1) { return; }\n  var resp = buffer.slice(0, this.bufferCursors[bufInd]).toString().trim();\n  var arr = resp.split('\\r\\n');\n\n  if (arr.length > 0) {\n    var i, arrLength = arr.length, hadNotification = false;\n    for (i = arrLength - 1; i >= 0; --i) {\n      if (this.handleNotification(arr[i])) {\n        arr.splice(i, 1);\n        --arrLength;\n        hadNotification = true;\n      }\n    }\n    if (hadNotification) {\n      if (arrLength > 0) {\n        var b = new Buffer(arr.join('\\r\\n'));\n        b.copy(buffer, 0);\n        this.bufferCursors[bufInd] = b.length;\n      } else {\n        this.bufferCursors[bufInd] = 0;\n        return;\n      }\n    }\n    var lastLine = (arr[arrLength - 1]).trim();\n\n    if (port === this.dataPort && this.commandsStack.length > 0) {\n      var cmd = this.commandsStack[0];\n      var b_Finished = false;\n\n      if (-1 !== lastLine.indexOf('ERROR') || -1 !== lastLine.indexOf('NOT SUPPORT')) {\n        b_Finished = true;\n      } else if (cmd.waitCommand !== null) {\n        if (-1 !== resp.indexOf(cmd.waitCommand)) {\n          b_Finished = true;\n        }\n      } else if (-1 !== lastLine.indexOf('OK')) {\n        b_Finished = true;\n      }\n      if (b_Finished) {\n        this.commandsStack.splice(0, 1);\n        if (this.echoMode) {\n          arr.splice(0, 1);\n        }\n        cmd.doCallback(resp);\n        this.bufferCursors[bufInd] = 0;\n        this.sendNext();\n      }\n    } else {\n      this.logger.debug('Unhandled command: %s', resp);\n      this.bufferCursors[bufInd] = 0;\n    }\n  }\n};\n/**\n * handles notification of rings, messages and USSD\n */\nModem.prototype.handleNotification = function (line) {\n  \"use strict\";\n  var handled = false, match, smsId, storage;\n\n  if(!this.messageParts) {\n    this.messageParts = {};\n  }\n\n  if (line.substr(0, 5) === '+CMTI') {\n    match = line.match(/\\+CMTI:\\s*\"?([A-Za-z0-9]+)\"?,(\\d+)/);\n    if (null !== match && match.length > 2) {\n      handled = true;\n      storage = match[1];\n      smsId = parseInt(match[2], 10);\n      this.getSMS(storage, smsId, function (err, msg) {\n        if (err === undefined) {\n          this.deleteSMS(smsId, function (err) {\n            if (err) {\n              this.logger.error('Unable to delete incoming message!!', err.message);\n            }\n          });\n          if(msg.udh && msg.udh.parts && msg.udh.parts > 1) {\n            //We still emit a message\n            this.emit('message', msg);\n\n            //We should assemble this message before passing it on\n            if(!this.messageParts[msg.udh.reference_number]) {\n                this.messageParts[msg.udh.reference_number] = {};\n                this.messageParts[msg.udh.reference_number].parts_remaining = msg.udh.parts;\n                this.messageParts[msg.udh.reference_number].text = [];\n                for(var i=0; i<msg.udh.parts; i++) {\n                    this.messageParts[msg.udh.reference_number].text.push(\"\");\n                }\n            }\n            this.messageParts[msg.udh.reference_number].text[msg.udh.current_part - 1] = msg.text;\n            this.messageParts[msg.udh.reference_number].parts_remaining--;\n            if(this.messageParts[msg.udh.reference_number].parts_remaining === 0) {\n                var nmsg = JSON.parse(JSON.stringify(msg));\n\n                delete nmsg.smsc_tpdu;\n                delete nmsg.tpdu_type;\n                delete nmsg.udh;\n\n                nmsg.text = \"\";\n\n                for(var i=0; i<msg.udh.parts; i++) {\n                    nmsg.text += this.messageParts[msg.udh.reference_number].text[i];\n                }\n                delete this.messageParts[msg.udh.reference_number];\n                this.emit('messagereceived', nmsg);\n            }\n          }\n          else {\n            this.emit('message', msg);\n            this.emit('messagereceived', msg);\n          }\n        }\n      }.bind(this));\n    }\n  } else if (line.substr(0, 5) === '+CDSI') {\n    match = line.match(/\\+CDSI:\\s*\"?([A-Za-z0-9]+)\"?,(\\d+)/);\n    if (null !== match && match.length > 2) {\n      handled = true;\n      storage = match[1];\n      smsId = parseInt(match[2], 10);\n      this.getSMS(storage, smsId, function (err, msg) {\n        if (err === undefined) {\n          this.deleteSMS(smsId, function (err) {\n            if (err) {\n              this.logger.error('Unable to delete incoming report!!', err.message);\n            }\n          }.bind(this));\n\n          this.emit('report', msg);\n\n          var trackingObj = this.deliveryParts[msg.reference];\n          if(trackingObj) {\n            trackingObj.parts--;\n            if(!trackingObj.deliveryReports) {\n              trackingObj.deliveryReports = [];\n            }\n            trackingObj.deliveryReports.push(msg);\n            delete this.deliveryParts[msg.reference];\n          }\n\n          if(trackingObj && trackingObj.parts === 0) {\n            var reportObj = {};\n            reportObj.reports = trackingObj.deliveryReports;\n            reportObj.reports = reportObj.reports.sort(function(a, b) { return a.reference - b.reference });\n            reportObj.isDeliveredSuccessfully = true;\n            reportObj.references = [];\n            reportObj.reports.forEach(function (report) {\n                /* We handle only 00 as its the most common success scenario\n                0x00  Short message delivered successfully\n                0x01  Forwarded, but status unknown\n                0x02  Replaced\n                0x20  Congestion, still trying\n                0x21  Recipient busy, still trying\n                0x22  No response recipient, still trying\n                0x23  Service rejected, still trying\n                0x24  QOS not available, still trying\n                0x25  Recipient error, still trying\n                0x40  RPC Error\n                0x41  Incompatible destination\n                0x42  Connection rejected\n                0x43  Not obtainable\n                0x44  QOS not available\n                0x45  No internetworking available\n                0x46  Message expired\n                0x47  Message deleted by sender\n                0x48  Message deleted by SMSC\n                0x49  Does not exist */\n                reportObj.references.push(report.reference);\n                reportObj.isDeliveredSuccessfully = (reportObj.isDeliveredSuccessfully && report.status === \"00\");\n            });\n            trackingObj = null;\n            this.emit('reportreceived', reportObj);\n          }\n        }\n      }.bind(this));\n    }\n  } else if (line.substr(0, 5) === '+CUSD') {\n    match = line.match(/\\+CUSD:\\s*(\\d),\"?([0-9A-F]+)\"?,(\\d*)/);\n    if (match !== null && match.length === 4) {\n      handled = true;\n      this.emit('USSD', parseInt(match[1], 10), match[2], parseInt(match[3], 10));\n    }\n  } else if (line.substr(0, 4) === 'RING') {\n    if (this.autoHangup) {\n      this.sendCommand('ATH');\n    }\n    handled = true;\n  }\n  else if(line.substr(0, 8) == '+CLIP: \"') {\n    match = line.match(/\\+CLIP: \"(.*)\"/);\n    if(match) {\n      this.emit('call', match[1]);\n    }\n    handled = true;\n  }\n  else if(line.substr(0, 5) === '^CEND') {\n    handled = true;\n  }\n  else if(line.substr(0,10) === '^DSFLOWRPT') {\n    //These events are emitted by modem when it is connected to internet through ppp\n    //See: http://www.sakis3g.com/\n    handled = true;\n  }\n  else if(line.substr(0,5) === '^BOOT') {\n    handled = true;\n  }\n  return handled;\n};\n/**\n * Configures modem\n */\nModem.prototype.configureModem = function (cb) {\n  \"use strict\";\n  this.setEchoMode(false);\n  this.setTextMode(false);\n  this.disableStatusNotifications();\n\n  this.sendCommand('AT+CNMI=2,1,0,2,0', function (err, data) {\n    if(data && data.indexOf(\"ERROR\") >= 0) {\n      //This command resulted in an error, we should try to configure the modem a little later\n      this.logger.debug('Waiting for modem to be ready...');\n      setTimeout(this.configureModem.bind(this, cb), 1000);\n      return;\n    }\n    else {\n        this.sendCommand('AT+CMEE=1');\n        this.sendCommand('AT+CVHU=0');\n        this.getManufacturer(function (err, manufacturer) {\n          if (!err) {\n            this.manufacturer = manufacturer.toUpperCase().trim();\n            if (this.manufacturer === 'OK') this.manufacturer = 'HUAWEI';\n          }\n        }.bind(this));\n\n        this.getStorages(function (err, storages) {\n          var i, supportOutboxME = false, supportInboxME = false;\n          if (!err) {\n            for (i = 0; i < storages.outbox.length; ++i) {\n              if (storages.outbox[i] === '\"ME\"') { supportOutboxME = true; break; }\n            }\n            for (i = 0; i < storages.inbox.length; ++i) {\n              if (storages.inbox[i] === '\"ME\"') { supportInboxME = true; break; }\n            }\n          }\n          this.setInboxOutboxStorage(supportInboxME ? \"ME\" : \"SM\", supportOutboxME ? \"ME\" : \"SM\", function (err) {\n            if (!err) {\n              this.getCurrentMessageStorages(function (err, storages) {\n                this.storages = storages;\n                if(typeof cb === 'function') {\n                  cb();\n                }\n                this.emit('connected');\n              }.bind(this));\n            } else {\n              this.logger.debug('Waiting for modem to be ready...');\n              setTimeout(this.configureModem.bind(this, cb), 1000);\n            }\n          }.bind(this));\n        }.bind(this));\n    }\n  }.bind(this, cb));\n};\n/**\n * Disables ^RSSI status notifications\n */\nModem.prototype.disableStatusNotifications = function () {\n  \"use strict\";\n  this.sendCommand('AT^CURC?', function (data) {\n    if (data.indexOf('COMMAND NOT SUPPORT') === -1 && data.indexOf('ERROR') === -1) {\n      this.sendCommand('AT^CURC=0');\n    }\n  }.bind(this));\n};\n/**\n * Sets modem's text mode\n * @param textMode boolean\n */\nModem.prototype.setTextMode = function (textMode, cb) {\n  \"use strict\";\n  this.sendCommand('AT+CMGF=' + (textMode === true ? '1' : '0'), function (data) {\n    if (-1 !== data.indexOf('OK')) {\n      this.textMode = textMode;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined, this.textMode);\n    }\n  }.bind(this));\n};\n/**\n * Sets echo mode to on/off\n */\nModem.prototype.setEchoMode = function (state, cb) {\n  \"use strict\";\n  this.sendCommand('ATE' + (state ? '1' : '0'), function (data) {\n    if (-1 !== data.indexOf('OK')) {\n      this.echoMode = state;\n    }\n    if (typeof cb === 'function') {\n      cb(undefined, this.echoMode);\n    }\n  }.bind(this));\n};\n/**\n * Gets current modem's SMS Center\n */\nModem.prototype.getSMSCenter = function (cb) {\n  \"use strict\";\n  this.sendCommand('AT+CSCA?', function (data) {\n    if (typeof cb === 'function') {\n      var match = data.match(/\\+CSCA:\\s*\"(.?[0-9]*)\".?,(\\d*)/);\n      if (match) {\n        cb(undefined, match[1]);\n      } else {\n        cb(new Error('NOT SUPPORTED'));\n      }\n    }\n  });\n};\n/**\n * Receives all short messages stored in the modem in terminal's memory\n * Deprecated\n */\nModem.prototype.getAllSMS = function (cb) {\n  \"use strict\";\n  this.getMessagesFromStorage('\"ME\"', cb);\n};\n/**\n * Receives all short messages stored in the modem in given storage\n */\nModem.prototype.getMessagesFromStorage = function (storage, cb) {\n  \"use strict\";\n  this.setReadStorage(storage, function (err) {\n    if (err) {\n      if (typeof cb === 'function') {\n        cb(err);\n      }\n      return;\n    }\n    this.sendCommand('AT+CMGL=' + (this.textMode ? '\"ALL\"' : 4), function (data) {\n      if (typeof cb === 'function') {\n        if (data.indexOf('OK') === -1) {\n          cb(new Error(data));\n          return;\n        }\n        var ret = {};\n        var arr = data.split('\\r\\n');\n        var i, msgStruct, index, match;\n        for (i = 0; i < arr.length; ++i) {\n          if (!this.textMode) {\n            match = arr[i].match(/\\+CMGL:\\s*(\\d+),(\\d+),(\\w*),(\\d+)/);\n            if (match !== null && match.length > 4) {\n              msgStruct = Pdu.parse(arr[++i]);\n              index = match[1];\n              msgStruct.status = parseInt(match[2], 10);\n              msgStruct.alpha = match[3];\n              msgStruct.length = parseInt(match[4], 10);\n              ret[index] = msgStruct;\n            }\n          } else {\n            //TODO: handle text mode\n            this.logger.error('Text mode is not supported right now', arr[i]);\n          }\n        }\n        cb(undefined, ret);\n      }\n    }.bind(this));\n  }.bind(this));\n};\n/**\n * Returns current message storages\n */\nModem.prototype.getCurrentMessageStorages = function (cb) {\n  this.sendCommand('AT+CPMS?', function (data) {\n    if (data.indexOf('OK') !== -1) {\n      var match = data.match(/\\+CPMS:\\s+(\"[A-Za-z0-9]+\"),(\\d+),(\\d+),(\"[A-Za-z0-9]+\"),(\\d+),(\\d+),(\"[A-Za-z0-9]+\"),(\\d+),(\\d+)/);\n      if (match && match.length > 9) {\n        var ret = {\n          storage1: {\n            storage: match[1],\n            current: parseInt(match[2], 10),\n            max: parseInt(match[3], 10)\n          },\n          storage2: {\n            storage: match[4],\n            current: parseInt(match[5], 10),\n            max: parseInt(match[6], 10)\n          },\n          storage3: {\n            storage: match[7],\n            current: parseInt(match[8], 10),\n            max: parseInt(match[9], 10)\n          },\n        };\n        cb(undefined, ret);\n      } else {\n        cb(new Error('NOT MATCHED'));\n      }\n    } else {\n      cb(new Error(data));\n    }\n  });\n};\n/**\n * Returns boolean whether modem supports given storage\n */\nModem.prototype.supportsStorage = function (storage, cb) {\n  if (storage[0] !== '\"') { storage = '\"' + storage + '\"'; }\n  this.getStorages(function (err, storages) {\n    if (typeof cb === 'function') {\n      if (!err) {\n        var i;\n        for (i = 0; i < storages.read.length; ++i) {\n          if (storages.read[i] === storage) {\n            cb(undefined, true);\n            return;\n          }\n        }\n        cb(undefined, false);\n      } else {\n        cb(err);\n      }\n    }\n  });\n};\n/**\n * Returns possible storages for inbox messages\n */\nModem.prototype.getStorages = function (cb) {\n  this.sendCommand('AT+CPMS=?', function (data) {\n    if (typeof cb === 'function') {\n      if (data.indexOf('OK') !== -1) {\n        var match = data.match(/\\+CPMS:\\s+\\(([^\\)]*)\\),\\(([^\\)]*)\\),\\(([^\\)]*)\\)/);\n        if (match && match.length > 3) {\n          var ret = {\n            read: match[1].split(','),\n            outbox: match[2].split(','),\n            inbox: match[3].split(',')\n          };\n          cb(undefined, ret);\n        } else {\n          cb(new Error('PARSE ERROR'));\n        }\n      } else {\n        cb(new Error(data));\n      }\n    }\n  });\n};\n/**\n * Sets storage for inbox messages\n */\nModem.prototype.setReadStorage = function (storage, cb) {\n  if (storage[0] !== '\"') { storage = '\"' + storage + '\"'; }\n  this.sendCommand('AT+CPMS=' + storage + ',,', function (data) {\n    if (typeof cb === 'function') {\n      if (data.indexOf('OK') !== -1) {\n        cb(undefined);\n      } else {\n        cb(new Error(data));\n      }\n    }\n  });\n};\n\n/**\n * Sets storage for inbox messages\n */\nModem.prototype.setInboxOutboxStorage = function (inbox, outbox, cb) {\n  if (inbox[0] !== '\"') { inbox = '\"' + inbox + '\"'; }\n  if (outbox[0] !== '\"') { outbox = '\"' + outbox + '\"'; }\n  this.sendCommand('AT+CPMS=' + inbox + ',' + outbox + ',' + inbox, function (data) {\n    if (typeof cb === 'function') {\n      if (data.indexOf('OK') !== -1) {\n        cb(undefined);\n      } else {\n        cb(new Error(data));\n      }\n    }\n  });\n};\n\n/**\n * Requests SMS by id\n * @param id int of the SMS to get\n * @param cb function to callback. Function should receive dictionary containing the parsed pdu message\n */\nModem.prototype.getSMS = function (storage, id, cb) {\n  \"use strict\";\n  var readMessage = function () {\n    this.sendCommand('AT+CMGR=' + id, function (data) {\n      if (typeof cb === 'function') {\n        if (-1 === data.indexOf('OK')) {\n          cb(new Error(data));\n          return;\n        }\n        var arr = data.split('\\r\\n');\n        var i, match, msgStruct;\n        for (i = 0; i < arr.length; ++i) {\n          match = arr[i].match(/\\+CMGR:\\s+(\\d*),(\\w*),(\\d+)/);\n          if (null !== match && match.length > 3) {\n            msgStruct = Pdu.parse(arr[++i]);\n            cb(undefined, msgStruct);\n            break;\n          }\n        }\n      }\n    });\n  }.bind(this);\n\n  if (storage !== null) {\n    this.setReadStorage(storage, function (err) {\n      if (err) { if (typeof cb === 'function') { cb(err); } return; }\n      readMessage();\n    }.bind(this));\n  } else {\n    readMessage();\n  }\n};\n\n/**\n * Queue to send parts of the message\n */\nfunction PartsSendQueue(modem, parts, cb) {\n  var currentPart = 0;\n  var references = [];\n\n  if(!modem.deliveryParts) {\n    modem.deliveryParts = {};\n  }\n\n  var trackingObj = {};\n  trackingObj.parts = parts.length;\n\n  this.sendNext = function () {\n    if (currentPart >= parts.length) {\n      if (typeof cb === 'function') {\n        cb(undefined, references);\n      }\n    } else {\n      modem.sendCommand('AT+CMGS=' + parts[currentPart].tpdu_length, undefined, '>');\n      modem.sendCommand(parts[currentPart].smsc_tpdu + String.fromCharCode(26), this.onSend.bind(this));\n      ++currentPart;\n    }\n  };\n\n  this.onSend = function (data) {\n    var match = data.match(/\\+CMGS:\\s*(\\d+)/);\n    if (match !== null && match.length > 1) {\n      var ref = parseInt(match[1], 10);\n      references.push(ref);\n      trackingObj.references = references;\n      //all individual parts point to the same obj\n      modem.deliveryParts[ref] = trackingObj;\n      this.sendNext();\n    } else {\n      if (typeof cb === 'function') {\n        cb(new Error(data));\n      }\n    }\n  };\n}\n\n/**\n * Sends SMS to the recepient.\n * @param message dictionary with possible keys:\n *  receiver - MSISDN of the recepient (required)\n *  text - text to send (required)\n *  receiver_type - 0x81 for local, 0x91 for international format\n *  encoding - 7bit or 16bit is supported. If not specified will be detected automatically\n *  request_status - if the modem should request delivery report\n *  smsc - SMS center to use (MSISDN) (default:use modem's default SMSC)\n *  smsc_type - SMS center type (0x81 for international and local, 0x91 for international format only) (default:0x81)\n */\nModem.prototype.sendSMS = function (message, cb) {\n  \"use strict\";\n  if (message.receiver === undefined || message.text === undefined) {\n    cb(new Error('Either receiver or text is not specified'));\n    return;\n  }\n\n  if (!this.textMode) {\n    var opts = message;\n    if(message.receiver && message.receiver.indexOf(\"+\") === 0) {\n      message.receiver = message.receiver.substring(1);\n      opts.receiver_type = 0x91;\n    }\n    else {\n      opts.receiver_type = 0x81;\n    }\n\n    if(message.smsc && message.smsc.indexOf(\"+\") === 0) {\n      message.smsc = message.smsc.substring(1);\n      opts.smsc_type = 0x91;\n    }\n    else {\n      opts.smsc_type = 0x81;\n    }\n\n    if (opts.encoding === undefined) {\n      opts.encoding = isGSMAlphabet(opts.text) ? '7bit' : '16bit';\n    }\n\n    var encoded = Pdu.generate(opts);\n    var queue = new PartsSendQueue(this, encoded, cb);\n    queue.sendNext();\n  }\n  //TODO: make textmode\n};\n\nModem.prototype.deleteAllSMS = function (cb) {\n  this.sendCommand('AT+CMGD=1,4', function (data) {\n    if (typeof cb === 'function') {\n      if (-1 === data.indexOf('OK')) {\n        cb(new Error(data));\n      } else {\n        cb(undefined);\n      }\n    }\n  });\n};\n/**\n * Deletes message by id\n */\nModem.prototype.deleteSMS = function (smsId, cb) {\n  this.sendCommand('AT+CMGD=' + smsId, function (data) {\n    if (typeof cb === 'function') {\n      if (-1 === data.indexOf('OK')) {\n        cb(new Error(data));\n      } else {\n        cb(undefined);\n      }\n    }\n  });\n};\n/**\n * Reads ZTE status reports\n */\nModem.prototype.readDeleteZTE_SR = function (cb) {\n  //I don't know how to do better way.........\n  var messagesCount = 0, messages = [], got = 0, current = 0;\n\n  var handleSMS = function (err, msgStruct) {\n    if (!err) {\n      messages.push(msgStruct);\n    }\n    ++got;\n    this.deleteSMS(current, function (err) {\n      if (got === messagesCount) {\n        if (typeof cb === 'function') {\n          process.nextTick(function () {\n            cb(undefined, messages);\n          });\n        }\n      } else {\n        ++current;\n        this.getSMS(null, current, handleSMS);\n      }\n    }.bind(this));\n  }.bind(this);\n\n  this.setReadStorage('SR', function (err) {\n    if (err) {\n      if (typeof cb === 'function') { cb(err); }\n    } else {\n      this.getCurrentMessageStorages(function (err, storages) {\n        if (err) {\n          if (typeof cb === 'function') { cb(err); }\n        } else {\n          messagesCount = storages.storage1.max;\n          this.getSMS(null, current, handleSMS);\n        }\n      }.bind(this));\n    }\n  }.bind(this));\n};\n\n/**\n * Requests custom USSD\n */\nModem.prototype.getUSSD = function (ussd, cb) {\n  if (this.manufacturer.indexOf('HUAWEI') !== -1) {\n    ussd = Pdu.ussdEncode(ussd);\n  }\n  this.sendCommand('AT+CUSD=1,\"' + ussd + '\",15', function (data) {\n    if (data.indexOf('OK') !== -1) {\n      var processed = false;\n      var USSDHandler = function (status, data, dcs) {\n        processed = true;\n        if (status === 1) { //cancel USSD session\n          this.sendCommand('AT+CUSD=2');\n        }\n        var encoding = Pdu.detectEncoding(dcs);\n        var text = '';\n        if (encoding === '16bit') {\n          text = Pdu.decode16Bit(data);\n        } else if (encoding === '7bit') {\n          text = Pdu.decode7Bit(data);\n        } else {\n          cb(new Error('Unknown encoding'));\n          return;\n        }\n        cb(undefined, text);\n      }.bind(this);\n\n      this.once('USSD', USSDHandler);\n      setTimeout(function () {\n        if (!processed) {\n          this.removeListener('USSD', USSDHandler);\n          cb(new Error('timeout'));\n        }\n      }.bind(this), this.ussdTimeout);\n    }\n  }.bind(this));\n};\n/**\n * Returns modem's IMSI\n */\nModem.prototype.getIMSI = function (cb) {\n  \"use strict\";\n  this.sendCommand('AT+CIMI', function (data) {\n    if (typeof cb === 'function') {\n      var match = data.match(/(\\d{10,})\\r\\n/);\n      if (null !== match && match.length === 2) {\n        cb(undefined, match[1]);\n      } else {\n        cb(new Error(data));\n      }\n    }\n  });\n};\n/**\n * Returns modem's IMEI\n */\nModem.prototype.getIMEI = function (cb) {\n  \"use strict\";\n  this.sendCommand('AT+CGSN', function (data) {\n    if (typeof cb === 'function') {\n      var match = data.match(/(\\d{10,})\\r\\n/);\n      if (null !== match && match.length === 2) {\n        cb(undefined, match[1]);\n      } else {\n        cb(new Error('GET IMEI NOT SUPPORTED: ' + data));\n      }\n    }\n  });\n};\n/**\n * Returns modem's manufacturer\n */\nModem.prototype.getManufacturer = function (cb) {\n  \"use strict\";\n  this.sendCommand('AT+CGMI', function (data) {\n    if (typeof cb === 'function') {\n      if (data.indexOf('OK') === -1) {\n        cb(new Error(data));\n      } else {\n        cb(undefined, data.split('\\r\\n')[0]);\n      }\n    }\n  });\n};\n/**\n * Returns modem's model\n */\nModem.prototype.getModel = function (cb) {\n  \"use strict\";\n  this.sendCommand('AT+CGMM', function (data) {\n    if (typeof cb === 'function') {\n      if (data.indexOf('OK') === -1) {\n        cb(new Error(data));\n      } else {\n        cb(undefined, data.split('\\r\\n')[0]);\n      }\n    }\n  });\n};\n/**\n * Requests operator name or code\n * @param text boolean return operator name if true, code otherwise\n * @param cb to call on completion\n */\nModem.prototype.getOperator = function (text, cb) {\n  \"use strict\";\n  this.sendCommand('AT+COPS=3,' + (text ? '0' : '2') + ';+COPS?', function (operator) {\n    var match = operator.match(/\\+COPS: (\\d*),(\\d*),\"?([\\w \\-]+)\"?,(\\d*)/);\n    if (typeof cb === 'function') {\n      if (null !== match && 4 < match.length) {\n        cb(undefined, match[3]);\n      } else {\n        cb(new Error('GET OPERATOR NOT SUPPORTED'));\n      }\n    }\n  }.bind(this));\n};\n/**\n * Returns if caller id is supported through emission of +CLIP messages\n * @param cb to call on completion\n */\nModem.prototype.getIsCallerIdSupported = function (cb) {\n  \"use strict\";\n  this.sendCommand('AT+CLIP=?', function (data) {\n    var match = data.match(/\\+CLIP: \\((.*)\\)/);\n    if (typeof cb === 'function') {\n      if (match) {\n        cb(undefined, match[1] === \"0-1\");\n      } else {\n        cb(new Error('GET CALLER ID NOT SUPPORTED'));\n      }\n    }\n  }.bind(this));\n};\n/**\n * Enables/disables caller id detection through +CLIP\n * @param cb to call on completion\n */\nModem.prototype.setSendCallerId = function (val, cb) {\n  \"use strict\";\n  this.sendCommand('AT+CLIP=' + (val ? \"1\" : \"0\"), function (data) {\n    if (data.indexOf('OK') === -1) {\n      cb(new Error(data));\n    } else {\n        cb(undefined);\n    }\n  }.bind(this));\n};\n/**\n * Requests current signal strength\n * @param cb function to call on completion. Returns dictionary with keys db and condition\n */\nModem.prototype.getSignalStrength = function (cb) {\n  \"use strict\";\n  this.sendCommand('AT+CSQ', function (data) {\n    if (typeof cb === 'function') {\n      var match = data.match(/\\+CSQ: (\\d+),(\\d*)/);\n      if (null !== match && 2 < match.length) {\n        var scale = parseInt(match[1], 10);\n        if (scale === 99) {\n          cb(undefined, {\n            db: 0,\n            condition: 'unknown'\n          });\n        } else {\n          var db = -113 + scale * 2, condition;\n          if (db < -95) {\n            condition = 'marginal';\n          } else if (db < -85) {\n            condition = 'workable';\n          } else if (db < -75) {\n            condition = 'good';\n          } else {\n            condition = 'excellent';\n          }\n          cb(undefined, {\n            db: db,\n            condition: condition\n          });\n        }\n      } else {\n        cb(new Error('GET SIGNAL NOT SUPPORTED'));\n      }\n    }\n  });\n};\n/**\n * Sends custom AT command\n */\nModem.prototype.customATCommand = function (cmd, cb) {\n  this.sendCommand(cmd, function (data) {\n    if (typeof cb === 'function') {\n      if (data.indexOf('OK') !== -1) {\n        cb(undefined, data);\n      } else {\n        cb(new Error(data));\n      }\n    }\n  });\n};\n\nmodule.exports = Modem;\n","/home/travis/build/npmtest/node-npmtest-gsm-modem/node_modules/gsm-modem/pdu.js":"//TODO: make 8-bit encoding\n\nvar pduParser = {};\n\nvar sevenBitDefault = new Array('@', '£', '$', '¥', 'è', 'é', 'ù', 'ì', 'ò', 'Ç', '\\n', 'Ø', 'ø', '\\r','Å', 'å','\\u0394', '_', '\\u03a6', '\\u0393', '\\u039b', '\\u03a9', '\\u03a0','\\u03a8', '\\u03a3', '\\u0398', '\\u039e','\\x1b', 'Æ', 'æ', 'ß', 'É', ' ', '!', '\"', '#', '¤', '%', '&', '\\'', '(', ')','*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7','8', '9', ':', ';', '<', '=', '>', '?', '¡', 'A', 'B', 'C', 'D', 'E','F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S','T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Ä', 'Ö', 'Ñ', 'Ü', '§', '¿', 'a','b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o','p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'ä', 'ö', 'ñ','ü', 'à');\nvar sevenBitEsc = new Array('', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '^', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '{', '}', '', '', '', '', '', '\\\\', '', '', '', '', '', '', '', '', '', '', '', '', '[', '~', ']',\n    '', '|', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '€', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '');\n\n//http://en.wikipedia.org/wiki/GSM_03.40\n//http://smsconnexion.wordpress.com/2009/02/12/sms-pdu-formats-demystified/\npduParser.parse = function(pdu) {\n    //Cursor points to the last octet we've read.\n    var cursor = 0;\n\n    var obj = parseSMSCPart (pdu);\n    obj.smsc_tpdu = pdu;\n    cursor += obj.length;\n\n    var buffer = new Buffer(pdu.slice(cursor,cursor+6), 'hex');\n    cursor += 6;\n    var smsDeliver = parseInt(buffer[0]);\n\n    var smsDeliverBits = (\"00000000\"+parseInt(smsDeliver).toString(2)).slice(-8);\n    var tp_mti = smsDeliverBits.slice(-2);\n    obj.tpdu_type = TP_MTI_To_String (tp_mti);\n\n    if (tp_mti=='10'){ //SMS-STATUS-REPORT\n    \treturn this.parseStatusReport (pdu.slice(cursor-6), obj);\n    }\n    var udhi =  smsDeliverBits.slice(1,2) === \"1\";\n\n    var senderSize = buffer[1];\n    if(senderSize % 2 === 1)\n        senderSize++;\n\n    obj.sender_type = parseInt(buffer[2]).toString(16);\n    if (obj.sender_type === 'd0') {\n        obj.sender = this.decode7Bit(pdu.slice(cursor, cursor+senderSize), Math.floor(senderSize*4/7)).trim();\n    } else {\n        obj.sender = pduParser.deSwapNibbles(pdu.slice(cursor, cursor+senderSize));\n    }\n    cursor += senderSize;\n\n    var protocolIdentifier = pdu.slice(cursor, cursor+2);\n    cursor += 2;\n\n    var dataCodingScheme = pdu.slice(cursor, cursor+2);\n    cursor = cursor+2;\n\n    obj.dcs = parseInt(dataCodingScheme, 16);\n    obj.encoding = pduParser.detectEncoding(dataCodingScheme);\n\n\n    obj.time = parseTS (pdu.slice(cursor, cursor+14));\n\n    cursor += 14;\n\n    var dataLength = parseInt(pdu.slice(cursor, cursor+2), 16).toString(10);\n    cursor += 2;\n\n    if(udhi) { //User-Data-Header-Indicator: means there's some User-Data-Header.\n        var udhLength = pdu.slice(cursor, cursor+2);\n        var iei = pdu.slice(cursor+2, cursor+4);\n        var headerLength, referenceNumber, parts, currentPart;\n        if(iei == \"00\") { //Concatenated sms.\n            headerLength = pdu.slice(cursor+4, cursor+6);\n            referenceNumber = pdu.slice(cursor+6, cursor+8);\n            parts = pdu.slice(cursor+8, cursor+10);\n            currentPart = pdu.slice(cursor+10, cursor+12);\n        }\n\n        if(iei == \"08\") { //Concatenaded sms with a two-bytes reference number\n            headerLength = pdu.slice(cursor+4, cursor+6);\n            referenceNumber = pdu.slice(cursor+6, cursor+10);\n            parts = pdu.slice(cursor+10, cursor+12);\n            currentPart = pdu.slice(cursor+12, cursor+14);\n        }\n\n        /*if(iei == '00')\n            cursor += (udhLength-2)*4;\n        else if(iei == '08')\n            cursor += ((udhLength-2)*4)+2;\n        else\n            cursor += (udhLength-2)*2;*/\n        cursor = cursor + (parseInt(udhLength, 16) + 1) * 2;\n    }\n    if(obj.encoding === '16bit')\n        var text = pduParser.decode16Bit(pdu.slice(cursor), dataLength);\n    else if(obj.encoding === '7bit')\n        if (udhi && iei=='00') var text = pduParser.decode7Bit(pdu.slice(cursor), dataLength-7, 1); //If iei ==0, then there is some unpadding to do\n        else if (udhi && iei=='08') var text = pduParser.decode7Bit(pdu.slice(cursor), dataLength-8); //If no udhi or iei = 08 then no unpadding to do\n        else var text = pduParser.decode7Bit(pdu.slice(cursor), dataLength);\n    else if(obj.encoding === '8bit')\n        var text = ''; //TODO\n\n    obj.text = text;\n\n    if(udhi) {\n        obj['udh'] = {\n            'length' : udhLength,\n            'iei' : iei,\n        };\n\n        if(iei == '00' || iei == '08') {\n            obj['udh']['reference_number'] = referenceNumber;\n            obj['udh']['parts'] = parseInt(parts);\n            obj['udh']['current_part'] = parseInt(currentPart);\n        }\n    }\n\n    return obj;\n}\n\npduParser.detectEncoding = function(dataCodingScheme) {\n    if (typeof dataCodingScheme === 'string') dataCodingScheme = parseInt(dataCodingScheme, 16);\n    var binary = ('00000000'+(dataCodingScheme.toString(2))).slice(-8);\n    if(binary == '00000000')\n        return '7bit';\n\n    // if(binary.slice(0, 2) === '00') {\n        var compressed = binary.slice(2, 1) === '1';\n        var bitsHaveMeaning = binary.slice(3, 1) === '1';\n\n        if(binary.slice(4,6) === '00')\n            return '7bit';\n\n        if(binary.slice(4,6) === '01')\n            return '8bit';\n\n        if(binary.slice(4,6) === '10')\n            return '16bit';\n    // }\n}\n\npduParser.decode16Bit = function(data, length) {\n    //We are getting ucs2 characters.\n    var ucs2 = '';\n    for(var i = 0;i<=data.length-1;i=i+4) {\n        ucs2 += String.fromCharCode(\"0x\"+data[i]+data[i+1]+data[i+2]+data[i+3]);\n    }\n\n    return ucs2;\n}\n\npduParser.deSwapNibbles = function(nibbles) {\n    var out = '';\n    for(var i = 0; i< nibbles.length; i=i+2) {\n        if(nibbles[i] === 'F') //Dont consider trailing F.\n            out += parseInt(nibbles[i+1], 16).toString(10);\n        else\n            out += parseInt(nibbles[i+1], 16).toString(10)+parseInt(nibbles[i], 16).toString(10);\n    }\n    return out;\n}\n\npduParser.decode7Bit = function(code, length, unPadding) {\n    //We are getting 'septeps'. We should decode them.\n    var binary = '';\n    for(var i = 0; i<code.length;i++)\n        binary += ('0000'+parseInt(code.slice(i,i+1), 16).toString(2)).slice(-4);\n\n    //This step is for 'unpadding' the padded data. If it has been encoded with 1 bit padding as it\n    //happens when the sender used a 7-bit message concatenation (cf http://mobiletidings.com/2009/02/18/combining-sms-messages/)\n    if (unPadding){\n        var binary2 = '';\n        binary = binary + '00000000';\n        for (var i=0; i<binary.length/8 - 1 ; i++)\n        {\n            binary2 += (binary.slice((i+1)*8+(8-unPadding), (i+2)*8) + binary.slice(i*8,i*8+(8-unPadding)));\n        }\n        binary = binary2;\n    }\n\n    var bin = Array();\n    var cursor = 0;\n    var fromPrevious = '';\n    var i = 0;\n    while(binary[i]) {\n        var remaining = 7 - fromPrevious.length;\n        var toNext = 8 - remaining;\n        bin[i] = binary.slice(cursor+toNext, cursor+toNext+remaining) + fromPrevious;\n        var fromPrevious = binary.slice(cursor, cursor+toNext);\n        if(toNext === 8)\n            fromPrevious = '';\n        else\n            cursor += 8;\n        i++;\n    }\n\n    var ascii = '';\n    var esc = false; //last character was a ESC\n    for(var i=0; i<length; i++){\n        var codeNum = parseInt(bin[i], 2);\n        if (codeNum == 0x1B){\n            esc = true;\n            continue;\n        }\n        if (esc)\n            ascii += sevenBitEsc[codeNum];\n        else\n            ascii += sevenBitDefault[codeNum];\n        esc = false;\n    }\n    return ascii;\n}\n\npduParser.encode7Bit = function(inTextNumberArray, paddingBits)\n{\n    //as explained here http://mobiletidings.com/2009/07/06/how-to-pack-gsm7-into-septets/\n    var paddingBits = paddingBits || 0;\n    var bits = 0;\n    var out = \"\";\n\n    if(paddingBits)\n        {\n            bits = 7 - paddingBits;\n            var octet = (inTextNumberArray[0] << (7 - bits)) % 256\n            out += ('00' + octet.toString(16)).slice(-2);\n            bits++;\n        }\n\n    for(var i = 0; i < inTextNumberArray.length; i++ )\n    {\n        if( bits == 7 )\n        {\n            bits = 0;\n            continue;\n        }\n        var octet = (inTextNumberArray[i] & 0x7f) >> bits;\n        if( i < inTextNumberArray.length - 1 )\n            {octet |= (inTextNumberArray[i + 1] << (7 - bits))%256;}\n        out += ('00' + octet.toString(16)).slice(-2);\n        bits++;\n    }\n    return out;\n}\n\npduParser.encode16Bit = function(inTextNumberArray) {\n    var out = '';\n    for(var i = 0; i<inTextNumberArray.length;i++) {\n        out += ('0000'+(inTextNumberArray[i].toString(16))).slice(-4);\n    }\n    return out;\n}\n\npduParser.messageToNumberArray = function(message) //sp\n{\n    //7bit GSM encoding according to GSM_03.38 character set http://en.wikipedia.org/wiki/GSM_03.38\n    res = [];\n    for (var k=0; k<message.text.length; k++)\n    {\n        if (message.encoding == '7bit'){\n            var character = message.text[k];\n            for(var i=0;i<sevenBitDefault.length;i++)\n            {\n                if(sevenBitDefault[i] == character)\n                    res.push(i);\n                if (sevenBitEsc[i] == character){\n                    res.push(0x1B); //escape character\n                    res.push(i);\n                }\n            }\n        }\n        else if (message.encoding == '16bit')\n            res.push(message.text.charCodeAt(k));\n    }\n    return res;\n};\n\n/**\n * Encodes message into PDU format\n * http://www.developershome.com/sms/cmgsCommand4.asp\n * Possible message values:\n *  smsc - SMS center to use (MSISDN) (default:use modem's default SMSC)\n *  smsc_type - SMS center type (0x81 for international and local, 0x91 for international format only) (default:0x81)\n *  receiver - Receiver of the SMS message\n *  receiver_type - type of the receiver's MSISDN (same as smsc_type) (default:0x81)\n *  text - text of the short message\n *  encoding - '7bit' or '16bit' (UCS-2)\n *  request_status - boolean, true to request delivery status\n */\npduParser.generate = function(message) {\n    var smsc = '';\n    var smscPartLength = 0;\n\n\tif (message.smsc!==undefined){\n        if (message.smsc_type!==undefined && (message.smsc_type==0x81 || message.smsc_type==0x91)){\n            smsc += message.smsc_type.toString (16);\n        } else {\n            smsc += '81';\n        }\n        smsc += this.swapNibbles(message.smsc);\n        var smsc_length = octetLength(smsc);\n        smsc = smsc_length + smsc;\n    } else {\n        smsc = '00';\n    }\n    var pdu = smsc;\n    smscPartLength = smsc.length;\n\n    var parts = 1;\n    var inTextNumberArray = this.messageToNumberArray(message);\n\n    if(message.encoding === '16bit' && inTextNumberArray.length > 70)\n        parts = inTextNumberArray.length / 66;\n\n    else if(message.encoding === '7bit' && inTextNumberArray.length > 160)\n        parts = inTextNumberArray.length / 153;\n\n    parts = Math.ceil(parts);\n\n    TPMTI  = 1<<0; //(2 bits) type msg, 1=submit by MS\n    TPRD   = 1<<2; //(1 bit) reject duplicates\n    TPVPF  = 1<<3; //(2 bits) validaty f. : 0=not pres, 1=enhanc,2=relative,3=absolute\n    TPSRR  = 1<<5; //(1 bit) want status reply\n    TPUDHI = 1<<6; //(1 bit) 1=header+data, 0=only data\n    TPRP   = 1<<7; //(1 bit) reply-path\n\n    var submit = TPMTI;\n\n    if(parts > 1) //UDHI\n        submit = submit | TPUDHI;\n\n    if (message.request_status!==undefined && message.request_status)\n    \tsubmit = submit | TPSRR;\n    pdu += ('00'+submit.toString(16)).slice(-2);\n    pdu += '00'; //Reference Number;\n    var receiverSize = ('00'+(parseInt(message.receiver.length, 10).toString(16))).slice(-2);\n    var receiver = pduParser.swapNibbles(message.receiver);\n\n\t//Destination MSISDN type\n    var receiverType;\n    if (message.receiver_type !== undefined && (message.receiver_type === 0x81 || message.receiver_type === 0x91)){\n        receiverType = message.receiver_type.toString(16);\n    } else {\n        receiverType = 81;\n    }\n    pdu += receiverSize.toString(16) + receiverType + receiver;\n    pdu += '00'; //TODO TP-PID\n\n    if(message.encoding === '16bit')\n        pdu += '08';\n    else if(message.encoding === '7bit')\n        pdu += '00';\n\n    var pdus = new Array();\n\n    var csms = randomHexa(2); // CSMS allows to give a reference to a concatenated message\n\n    for(var i=0; i< parts; i++) {\n        pdus[i] = pdu;\n\n        if(message.encoding === '16bit') {\n            /* If there are more than one messages to be sent, we are going to have to put some UDH. Then, we would have space only\n             * for 66 UCS2 characters instead of 70 */\n            if(parts === 1)\n                var length = 70;\n            else\n                var length = 66;\n\n        } else if(message.encoding === '7bit') {\n            /* If there are more than one messages to be sent, we are going to have to put some UDH. Then, we would have space only\n             * for 153 ASCII characters instead of 160 */\n            if(parts === 1)\n                var length = 160;\n            else\n                var length = 153;\n        } else if(message.encoding === '8bit') {\n\n        }\n        var text = inTextNumberArray.slice(i*length, (i*length)+length);\n\n        var user_data;\n        if(message.encoding === '16bit') {\n            user_data = pduParser.encode16Bit(text);\n            var size = (user_data.length / 2);\n\n            if(parts > 1)\n                size += 6; //6 is the number of data headers we append.\n\n        } else if(message.encoding === '7bit') {\n            if(parts > 1){\n                user_data = pduParser.encode7Bit(text,1);\n                var size = 7 + text.length;\n            }\n            else {\n                user_data = pduParser.encode7Bit(text);\n                var size = text.length;\n            }\n        }\n\n        pdus[i] += ('00'+parseInt(size).toString(16)).slice(-2);\n\n        // UDHI control header for concaterating message's parts\n        if(parts > 1) {\n            pdus[i] += '05';\n            pdus[i] += '00';\n            pdus[i] += '03';\n            pdus[i] +=  csms;\n            pdus[i] += ('00'+parts.toString(16)).slice(-2);\n            pdus[i] += ('00'+(i+1).toString(16)).slice(-2);\n        }\n        pdus[i] += user_data;\n        pdus[i] = {\n        \ttpdu_length: (pdus[i].length - smscPartLength)/2,\n        \tsmsc_tpdu: pdus[i].toUpperCase()\n        };\n    }\n\n    return pdus;\n}\n\n\npduParser.swapNibbles = function(nibbles) {\n    var out = '';\n    for(var i = 0; i< nibbles.length; i=i+2) {\n        if(typeof(nibbles[i+1]) === 'undefined') // Add a trailing F.\n            out += 'F'+parseInt(nibbles[i], 16).toString(10);\n        else\n            out += parseInt(nibbles[i+1], 16).toString(10)+parseInt(nibbles[i], 16).toString(10);\n    }\n    return out;\n}\n\npduParser.parseStatusReport = function(pdu, smsc_parsed) {\n    var cursor = 0;\n    var obj = smsc_parsed;\n\n    var header = parseInt(pdu.slice(cursor,cursor+2));\n    cursor += 2;\n    //TODO: maybe SMS-COMMAND here\n\n    obj.reference = parseInt(pdu.slice(cursor,cursor+2), 16);\n    cursor += 2;\n\n    var senderSize = parseInt(pdu.slice(cursor,cursor+2), 16);\n    if(senderSize % 2 === 1)\n        senderSize++;\n    cursor += 2;\n\n    obj.sender_type = parseInt(pdu.slice(cursor,cursor+2));\n    cursor += 2;\n\n    obj.sender = pduParser.deSwapNibbles(pdu.slice(cursor, cursor+senderSize));\n    cursor += senderSize;\n\n    obj.smsc_ts = parseTS(pdu.slice(cursor, cursor+14));\n    cursor += 14;\n    obj.discharge_ts = parseTS(pdu.slice(cursor, cursor+14));\n    cursor += 14;\n\n    obj.status = pdu.slice(cursor, cursor+2);\n\n    return obj;\n}\n/**\n * Parses SMSC part of the PDU\n */\nfunction parseSMSCPart (pdu){\n\t//Cursor points to the last octet we've read.\n    var cursor = 0;\n\n    var buffer = new Buffer(pdu.slice(0,4), 'hex');\n    var smscSize = buffer[0];\n    var smscType = buffer[1].toString(16);\n    var smscNum  = pduParser.deSwapNibbles(pdu.slice(4, smscSize*2+2));\n    return {\n    \t'smsc' : smscNum,\n    \t'smsc_type' : smscType,\n    \t'length' : smscSize*2+2\n    };\n}\n/**\n * Parses timestamp from PDU\n */\nfunction parseTS (ts){\n\tvar t = pduParser.deSwapNibbles (ts);\n\n\tvar time = new Date;\n    time.setFullYear(2000+parseInt (t.substr (0,2)));\n    time.setMonth(parseInt (t.substr(2,2))-1);\n    time.setDate(parseInt (t.substr(4,2)));\n    time.setHours(parseInt (t.substr(6,2)));\n    time.setMinutes(parseInt (t.substr(8,2)));\n    time.setSeconds(parseInt (t.substr(10,2)));\n\n    var firstTimezoneOctet = parseInt(t.substr(12,1));\n    var binary = (\"0000\"+firstTimezoneOctet.toString(2)).slice(-4);\n    var factor = binary.slice(0,1) === '1' ? 1 : -1;\n    var binary = '0'+binary.slice(1, 4);\n    var firstTimezoneOctet = parseInt(binary, 2).toString(10);\n    var timezoneDiff = parseInt(firstTimezoneOctet + t.substr(13, 1));\n    var time = new Date(time.getTime() + (timezoneDiff * 15 * 60000 * factor) - time.getTimezoneOffset()*60000);\n\n\treturn time;\n}\n\nfunction TP_MTI_To_String (tp_mti){\n\tswitch (tp_mti){\n\t\tcase '00': return 'SMS-DELIVER';\n\t\tcase '01': return 'SMS-SUBMIT';\n\t\tcase '10': return 'SMS-STATUS-REPORT';\n\t\tdefault: return 'unknown';\n\t}\n}\n\nfunction randomHexa(size)\n{\n    var text = \"\";\n    var possible = \"0123456789ABCDEF\";\n    for( var i=0; i < size; i++ )\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n}\n\n/**\n * Return length of the octet\n */\nfunction octetLength (str) {\n    var len = (str.toString().length/2).toString(16).toUpperCase();\n    if (len.length==1) len = '0' + len;\n    return len;\n};\n\n/**\n * Encodes ussd request to PDU\n */\npduParser.ussdEncode = function (ussd) {\n\tvar arr = this.messageToNumberArray ({text:ussd,encoding:'7bit'});\n\treturn this.encode7Bit(arr).toUpperCase();\n};\n\nmodule.exports = pduParser;\n"}